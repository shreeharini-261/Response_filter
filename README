# 🧪 Flask API Response Filtering with Marshmallow

This project demonstrates how to use **Marshmallow** for secure, clean, and role-based response filtering in a Flask API.

---

## 🚀 Overview

This Flask API ensures that the data returned to clients is:

- Secure (sensitive data hidden from unauthorized users)
- Clean and consistent
- Role-based (different data views for public vs admin)

It uses **Marshmallow schemas** to serialize objects and control which fields are included in responses.

---

## 🌟 Key Features

- 🔒 **Sensitive data filtering** (e.g., cost prices hidden from the public)
- 👥 **Role-based schemas** (Public vs Admin views)
- ✅ **Request and response validation** using Marshmallow
- 🏷 **Field-level control** over formatting, renaming, and inclusion

---

## ⚙️ How the Filtering Works

1. Two separate Marshmallow schemas are defined:

   - `PublicSchema`: Exposes **only safe fields** like `id`, `name`, `price`.
   - `PrivateSchema`: Exposes **all fields**, including sensitive ones like `cost_price`.

2. Flask routes choose the schema based on the user role or endpoint:

   ```python
   # Public route
   @app.route('/products')
   def public_view():
       return PublicSchema(many=True).dump(products)

   # Admin route
   @app.route('/admin/products')
   def admin_view():
       return PrivateSchema(many=True).dump(products)
